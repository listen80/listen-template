{"version":3,"file":"lt.min.js","sources":["../src/utils.js","../src/compile.js","../src/index.js"],"sourcesContent":["/**\r\n * 将传入的值转换为字符串类型。\r\n * 如果传入的值为 undefined 或 null，则返回空字符串。\r\n * 否则，将该值转换为字符串并返回。\r\n * @param {*} value - 需要转换为字符串的值。\r\n * @returns {string} - 转换后的字符串。\r\n */\r\nfunction toString(value) {\r\n  // 检查值是否为 undefined 或 null\r\n  if (value == undefined) {\r\n    // 如果是，则将值设置为空字符串\r\n    value = \"\";\r\n  } else {\r\n    // 否则，通过拼接空字符串将值转换为字符串\r\n    value += \"\";\r\n  }\r\n  return value;\r\n}\r\n\r\n/**\r\n * 用于转义 HTML 特殊字符的映射对象。\r\n * 键为需要转义的特殊字符，值为对应的 HTML 实体编码。\r\n */\r\nconst map = {\r\n  \"<\": \"&#60;\",\r\n  \">\": \"&#62;\",\r\n  '\"': \"&#34;\",\r\n  \"'\": \"&#39;\",\r\n  \"&\": \"&#38;\",\r\n};\r\n\r\n/**\r\n * 对传入的值进行 HTML 特殊字符转义。\r\n * 首先将传入的值转换为字符串，然后替换其中的特殊字符为对应的 HTML 实体编码。\r\n * @param {*} value - 需要进行转义的值。\r\n * @returns {string} - 转义后的字符串。\r\n */\r\nfunction escape(value) {\r\n  // 先将值转换为字符串，然后替换特殊字符\r\n  return toString(value).replace(/&(?![\\w#]+;)|[<>\"']/g, function (s) {\r\n    // 根据映射对象返回对应的 HTML 实体编码\r\n    return map[s];\r\n  });\r\n}\r\n\r\n/**\r\n * 检查一个对象是否类似数组。\r\n * 类似数组的对象需要满足非 null 且具有一个数值类型的 length 属性。\r\n * @param {*} obj - 需要检查的对象。\r\n * @returns {boolean} - 如果对象类似数组则返回 true，否则返回 false。\r\n */\r\nfunction ArrayLike(obj) {\r\n  // 检查对象是否存在且 length 属性是否为数值类型\r\n  return obj && typeof obj.length === \"number\";\r\n}\r\n\r\n/**\r\n * 遍历数组或对象，并对每个元素执行回调函数。\r\n * 如果传入的是类似数组的对象，则使用 for 循环遍历；如果是普通对象，则使用 for...in 循环遍历。\r\n * @param {Array|Object} data - 需要遍历的数组或对象。\r\n * @param {Function} callback - 对每个元素执行的回调函数，接收三个参数：元素值、元素索引或键、计数器。\r\n */\r\nfunction forEach(data, callback) {\r\n  var i,\r\n    len,\r\n    count = 0;\r\n  // 检查 data 是否为类似数组的对象\r\n  if (ArrayLike(data)) {\r\n    // 使用 for 循环遍历类似数组的对象\r\n    for (i = 0, len = data.length; i < len; i++) {\r\n      // 调用回调函数，将 this 指向 data\r\n      callback.call(data, data[i], i, i);\r\n    }\r\n  } else {\r\n    // 使用 for...in 循环遍历普通对象\r\n    for (i in data) {\r\n      // 检查属性是否为对象自身的属性\r\n      if (data.hasOwnProperty(i)) {\r\n        // 调用回调函数，将 this 指向 data，并更新计数器\r\n        callback.call(data, data[i], i, count);\r\n        count++;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 导出工具函数模块。\r\n * 包含 toString、forEach 和 escape 三个工具函数。\r\n */\r\nmodule.exports = {\r\n  toString,\r\n  forEach,\r\n  escape,\r\n};\r\n","/**\r\n * 将输入的代码字符串包装成 $o += code; 的形式\r\n * @param {string} code - 需要处理的代码字符串\r\n * @returns {string} - 包装后的代码字符串\r\n */\r\nfunction echo(code) {\r\n  return \"$o+=\" + code + \";\";\r\n}\r\n\r\n/**\r\n * 处理 HTML 代码，将特殊字符转义后包装成 $o += 'code'; 的形式\r\n * @param {string} code - 需要处理的 HTML 代码字符串\r\n * @returns {string} - 处理后的代码字符串，如果输入为空则返回原输入\r\n */\r\nfunction for_html(code) {\r\n  if (code) {\r\n    // 对代码中的单引号、反斜杠、回车和换行符进行转义\r\n    return echo(\r\n      \"'\" +\r\n      code\r\n        .replace(/('|\\\\)/g, \"\\\\$1\")\r\n        .replace(/\\r/g, \"\\\\r\")\r\n        .replace(/\\n/g, \"\\\\n\") +\r\n      \"'\"\r\n    );\r\n  } else {\r\n    return code;\r\n  }\r\n}\r\n\r\n/**\r\n * 根据输入的代码关键字，将自定义语法转换为 JavaScript 代码\r\n * @param {string} code - 需要处理的自定义语法代码字符串\r\n * @returns {string} - 转换后的 JavaScript 代码字符串\r\n */\r\nfunction for_js(code) {\r\n  // 去除代码首尾的空白字符，并按空白字符分割成数组\r\n  var split = code.replace(/^\\s+|\\s+$/, \"\").split(/\\s+/);\r\n  // 取出数组的第一个元素作为关键字\r\n  var key = split.shift();\r\n  switch (key) {\r\n    case \"if\":\r\n      // 转换 if 语句\r\n      code = \"if(\" + split.join(\" \") + \"){\";\r\n      break;\r\n\r\n    case \"else\":\r\n      // 转换 else 语句\r\n      code = \"}else{\";\r\n      break;\r\n\r\n    case \"elif\":\r\n    case \"elseif\":\r\n      // 转换 elseif 语句\r\n      code = \"}else if(\" + split.join(\" \") + \"){\";\r\n      break;\r\n\r\n    case \"/if\":\r\n      // 结束 if 语句块\r\n      code = \"};\";\r\n      break;\r\n\r\n    case \"for\":\r\n      // 确保循环变量有默认值\r\n      split[0] = split[0] || \"$d\";\r\n      split[1] = split[1] || \"$v\";\r\n      split[2] = split[2] || \"$k\";\r\n      // 转换 for 循环语句\r\n      code = \"$f(\" + split.shift() + \",function(\" + split.join() + \"){\";\r\n      break;\r\n\r\n    case \"/for\":\r\n      // 结束 for 循环语句块\r\n      code = \"});\";\r\n      break;\r\n\r\n    case \"eval\":\r\n      // 直接执行代码\r\n      code = split.join(' ') + \";\";\r\n      break;\r\n\r\n    case \"escape\":\r\n      // 对代码进行转义处理并追加到 $o\r\n      code = echo(\"$e(\" + split.join(\" \") + \")\");\r\n      break;\r\n\r\n    case \"include\":\r\n      // 包含其他模板并追加到 $o\r\n      code = echo(\"$t(\" + split[0] + \")(\" + split[1] + \")\");\r\n      break;\r\n\r\n    default:\r\n      // 默认处理，对代码进行处理并追加到 $o\r\n      code = echo(\"$s(\" + code + \")\");\r\n      break;\r\n  }\r\n  return code;\r\n}\r\n\r\n/**\r\n * 将输入的模板源代码编译成一个 JavaScript 函数\r\n * @param {string} source - 需要编译的模板源代码\r\n * @returns {Function} - 编译后的 JavaScript 函数，接收一个数据对象作为参数\r\n */\r\nfunction compile(source) {\r\n  // 初始化代码字符串，定义一些变量和初始值\r\n  var code = \"'use strict';var $t=this,$e=$t.$e,$f=$t.$f,$s=$t.$s,$o='';\";\r\n  // 按 { 或 } 分割源代码\r\n  var codes = source.split(/\\{|\\}/);\r\n  for (var i = 0, len = codes.length; i < len; i++) {\r\n    // 偶数索引处理 HTML 代码，奇数索引处理自定义语法代码\r\n    i % 2 === 0 ? (code += for_html(codes[i])) : (code += for_js(codes[i]));\r\n  }\r\n  // 添加返回语句\r\n  code += \"return $o;\";\r\n  try {\r\n    // 动态创建一个函数并返回\r\n    return new Function(\"$d\", code);\r\n  } catch (e) {\r\n    // 捕获编译错误并输出错误信息和生成的代码\r\n    console.error(\"Compile error: \" + e.message);\r\n    console.error(code);\r\n    throw e;\r\n  }\r\n}\r\n\r\nmodule.exports = { compile };\r\n","// 从 './utils' 模块导入 toString、forEach 和 escape 函数\r\nconst { toString, forEach, escape } = require(\"./utils\");\r\n// 从 './compile' 模块导入 compile 函数\r\nconst { compile } = require(\"./compile\");\r\n\r\n// 用于缓存已编译的模板函数\r\nconst cache = {};\r\n\r\n/**\r\n * 根据传入的模板字符串构建一个渲染函数\r\n * @param {string} tpl - 模板字符串\r\n * @returns {Function} - 一个接受数据对象并返回渲染结果的函数\r\n */\r\nfunction build(tpl) {\r\n  // 调用 compile 函数编译模板字符串，得到一个渲染函数\r\n  const func = compile(tpl);\r\n  return function (data) {\r\n    try {\r\n      // 调用渲染函数并传入数据对象，返回渲染结果\r\n      return func.call(lt, data);\r\n    } catch (e) {\r\n      // 捕获并打印错误信息\r\n      console.error(e);\r\n      // 打印模板错误信息和渲染函数\r\n      console.error(\"lt.js: template error\", func);\r\n      // 出错时返回空字符串\r\n      return \"\";\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * 主函数，用于处理模板字符串并返回渲染函数\r\n * @param {string|HTMLElement} tpl - 模板字符串或 HTML 元素的 ID\r\n * @param {string} [id] - 可选的缓存 ID\r\n * @returns {Function} - 一个接受数据对象并返回渲染结果的函数\r\n */\r\nfunction lt(tpl, id) {\r\n  // 将 tpl 转换为字符串\r\n  tpl += \"\";\r\n  let el;\r\n  // 检查缓存中是否已经存在该模板的渲染函数\r\n  if (cache[tpl]) {\r\n    return cache[tpl];\r\n  } \r\n  // 尝试通过 ID 获取 HTML 元素\r\n  else if ((el = document.getElementById(tpl))) {\r\n    // 如果未提供 id，则使用 tpl 作为 id\r\n    id = id || tpl;\r\n    // 获取 HTML 元素的内部 HTML 作为模板字符串\r\n    tpl = el.innerHTML;\r\n  }\r\n  // 构建渲染函数并缓存，然后返回该函数\r\n  return (cache[id] = build(tpl));\r\n}\r\n\r\n// 将 escape 函数挂载到 lt 对象上\r\nlt.$e = escape;\r\n// 将 forEach 函数挂载到 lt 对象上\r\nlt.$f = forEach;\r\n// 将 toString 函数挂载到 lt 对象上\r\nlt.$s = toString;\r\n\r\n// 导出 lt 函数\r\nmodule.exports = lt;\r\n"],"names":["toString","value","undefined","map","utils","forEach","data","callback","i","len","obj","count","length","call","hasOwnProperty","escape","replace","s","echo","code","for_html","for_js","split","shift","join","compile_1","compile","source","codes","Function","e","console","error","message","require$$0","require$$1","cache","lt","tpl","id","el","document","getElementById","innerHTML","func","build","$e","$f","$s"],"mappings":"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"}